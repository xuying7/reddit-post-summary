from sqlalchemy.orm import Session
from typing import List, Optional

import models, schemas

def get_user_by_provider_details(db: Session, provider: str, provider_account_id: str):
    return db.query(models.User).filter(
        models.User.provider == provider,
        models.User.provider_account_id == provider_account_id
    ).first()

def create_user(db: Session, user_data: schemas.UserSync) -> models.User:
    db_user = models.User(
        email=user_data.email,
        name=user_data.name,
        provider=user_data.provider,
        provider_account_id=user_data.provider_account_id
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def update_user(db: Session, db_user: models.User, user_data: schemas.UserSync) -> models.User:
    # Update fields if they have changed
    updated = False
    if user_data.name and db_user.name != user_data.name:
        db_user.name = user_data.name
        updated = True
    # Add other fields like profile picture if needed
    # if user_data.image and db_user.image != user_data.image:
    #     db_user.image = user_data.image
    #     updated = True

    if updated:
        db.commit()
        db.refresh(db_user)
    return db_user

# ParameterHistory CRUD operations
def create_parameter_history(db: Session, user_id: int, history_data: schemas.ParameterHistoryCreate) -> models.ParameterHistory:
    db_parameter_history = models.ParameterHistory(
        user_id=user_id,
        parameters=history_data.parameters,
        title=history_data.title
        # session_uuid is auto-generated by model default
    )
    db.add(db_parameter_history)
    db.commit()
    db.refresh(db_parameter_history)
    return db_parameter_history

def get_parameter_history_by_session_uuid(db: Session, session_uuid: str) -> Optional[models.ParameterHistory]:
    return db.query(models.ParameterHistory).filter(models.ParameterHistory.session_uuid == session_uuid).first()

def get_parameter_histories_by_user(db: Session, user_id: int, skip: int = 0, limit: int = 100) -> List[models.ParameterHistory]:
    return (
        db.query(models.ParameterHistory)
        .filter(models.ParameterHistory.user_id == user_id)
        .order_by(models.ParameterHistory.created_at.desc())
        .offset(skip)
        .limit(limit)
        .all()
    )

# ChatHistory CRUD operations
def create_chat_history(
    db: Session, 
    user_id: int, 
    message: str, 
    response: str, 
    parameter_history_id: Optional[int] = None
) -> models.ChatHistory:
    db_chat_history = models.ChatHistory(
        user_id=user_id,
        message=message,
        response=response,
        parameter_history_id=parameter_history_id
    )
    db.add(db_chat_history)
    db.commit()
    db.refresh(db_chat_history)
    return db_chat_history

# Add other ChatHistory operations if needed, e.g., get_chat_histories_by_parameter_session_uuid
def get_chat_history_for_session(db: Session, parameter_session_uuid: str) -> List[models.ChatHistory]:
    # First, get the parameter_history_id from the session_uuid
    parameter_history = get_parameter_history_by_session_uuid(db, parameter_session_uuid)
    if not parameter_history:
        return []
    return (
        db.query(models.ChatHistory)
        .filter(models.ChatHistory.parameter_history_id == parameter_history.id)
        .order_by(models.ChatHistory.created_at.asc())
        .all()
    ) 